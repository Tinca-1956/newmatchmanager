rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isSiteAdmin() {
      // Use exists() to check for the document and then check the role.
      // This is generally safer than a direct get().
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    function isClubAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Club Admin';
    }
    
    // --- USERS ---
    // Any authenticated user can read the users collection.
    // This is a temporary, insecure rule for debugging.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isSiteAdmin() || isClubAdmin() || request.auth.uid == userId);
    }

    // --- CLUBS ---
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isSiteAdmin();
    }
    
    // --- SERIES ---
    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isSiteAdmin() || isClubAdmin());
    }

    // --- MATCHES ---
    match /matches/{matchId} {
      // Allow any authenticated user to read any match
      allow read: if request.auth != null;
      // Allow admins to create/update matches
      allow write: if request.auth != null && (isSiteAdmin() || isClubAdmin());
    }
    
    // --- RESULTS ---
    match /results/{resultId} {
       // Allow any authenticated user to read results
      allow read: if request.auth != null;
      // Allow admins to write results
      allow write: if request.auth != null && (isSiteAdmin() || isClubAdmin());
    }

    // Fallback to deny all other paths
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
