
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is a Site Admin by reading their user document
    function isSiteAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Site Admin';
    }

    // Helper function to check if a user is an admin of a specific club
    function isClubAdmin(userId, clubId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId)).data;
      return userDoc.role == 'Club Admin' && userDoc.primaryClubId == clubId;
    }
    
    // Helper function to check if user is a member of the match's club
    function isMemberOfClub(userId, clubId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId)).data;
      return userDoc.primaryClubId == clubId;
    }

    // Users can read/write their own user document. Site Admins can read/update any.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isSiteAdmin(request.auth.uid));
      allow write: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && isSiteAdmin(request.auth.uid);
    }

    // Clubs can be read by any authenticated user, but only written by Site Admins.
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isSiteAdmin(request.auth.uid);
    }
    
    // Series can be read by any authenticated user, written by admins of that club or Site Admins
    match /series/{seriesId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && (isClubAdmin(request.auth.uid, resource.data.clubId) || isSiteAdmin(request.auth.uid));
    }

    // Match documents
    match /matches/{matchId} {
      // Anyone can read a single match document.
      allow get: if request.auth != null;
      
      // Allow listing matches if the user is a Site Admin OR if they are querying by their own clubId.
      allow list: if request.auth != null && (isSiteAdmin(request.auth.uid) || request.query.get("where")[0][2] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId);

      // Create/Update/Delete allowed for Site Admins or Club Admins of the relevant club.
      allow create, update, delete: if request.auth != null && (isClubAdmin(request.auth.uid, resource.data.clubId) || isSiteAdmin(request.auth.uid));
    }
    
    // Results can be read by any authenticated user.
    // Writes are handled by more specific rules or backend logic (e.g. Cloud Functions/weigh-in page)
    match /results/{resultId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, resource.data.clubId));
    }
  }
}
