rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSiteAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.role == 'Club Admin' && user.primaryClubId == clubId;
    }
    
    function isMemberOfClub(clubId) {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId;
    }

    // Site Admins can read/write any club.
    // Users can read any club document (e.g., for selection lists).
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin();
    }
    
    match /series/{seriesId} {
       allow read: if request.auth != null && isMemberOfClub(resource.data.clubId);
       allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }

    match /users/{userId} {
      // Anyone can read a user's profile.
      allow read: if request.auth != null;
      // Only the user themselves or an admin can update their profile.
      allow update: if request.auth.uid == userId || isSiteAdmin();
      // Only Site Admins can create or delete user records.
      allow create, delete: if isSiteAdmin();
    }
    
    match /matches/{matchId} {
      // Rule for LISTING matches:
      // A query must filter by the user's clubId unless they are a Site Admin.
      allow list: if request.auth != null &&
                  (isSiteAdmin() ||
                  (request.query.limit > 0 || request.query.limit == -1) && request.query.filters[0].value == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId);
                  
      // Rule for GETTING a single match:
      // A user must be a member of the club the match belongs to, or be a site admin.
      allow get: if request.auth != null &&
                  (isSiteAdmin() || isMemberOfClub(resource.data.clubId));

      // Rule for WRITING (create, update, delete) matches:
      // A user must be a Club Admin of that club or a Site Admin.
      allow write: if request.auth != null &&
                    (isSiteAdmin() || isClubAdmin(request.resource.data.clubId));
    }

    match /results/{resultId} {
       // Anyone can read results.
       allow read: if request.auth != null;
       // Only Admins or Marshals can write results.
       allow write: if request.auth != null && 
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin', 'Marshal']);
    }
  }
}
