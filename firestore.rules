
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSiteAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.role == 'Club Admin' && userProfile.primaryClubId == clubId;
    }

    function isClubMember(clubId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.primaryClubId == clubId;
    }
    
    // User can always read/update their own profile
    // Admins can read any profile, Site Admins can update any profile.
    match /users/{userId} {
       allow read: if request.auth.uid == userId || isSiteAdmin() || isClubAdmin(resource.data.primaryClubId);
       allow write: if request.auth.uid == userId;
       allow update: if request.auth.uid == userId || isSiteAdmin() || isClubAdmin(request.resource.data.primaryClubId);
    }
    
    // Clubs can be read by anyone authenticated.
    // Writes are restricted to Site Admins. Club Admins can only edit specific fields.
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow create, delete: if isSiteAdmin();
      allow update: if isSiteAdmin() || 
                      (isClubAdmin(clubId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'imageUrl']));
    }

    // Series can be read by any member of the club, but only managed by admins.
    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow write: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin();
    }
    
    // Standard texts can only be managed by admins of that club.
    match /Standard_Texts/{textId} {
      allow read, write: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin();
    }
    
    // Tags can only be managed by admins of that club.
     match /tags/{tagId} {
      allow read, write: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin();
    }
    
    // Notifications are specific to a user.
    match /notifications/{notificationId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    // Matches can be read by any authenticated user.
    // Creation/deletion is restricted to admins.
    // Updates are complex:
    // - Admins can update anything.
    // - Any authenticated user can update a match IF they are only adding themselves to the 'registeredAnglers' array.
    match /matches/{matchId} {
      allow read: if request.auth != null;
      allow create, delete: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin();
      allow update: if (isClubAdmin(request.resource.data.clubId) || isSiteAdmin()) ||
                       (request.auth.uid != null &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']) &&
                        request.resource.data.registeredAnglers == resource.data.registeredAnglers.concat([request.auth.uid]) &&
                        request.resource.data.registeredCount == resource.data.registeredCount + 1
                       );
    }

    // Results can be read by anyone authenticated.
    // Writes are restricted to club admins and site admins.
    match /results/{resultId} {
      allow read: if request.auth != null;
      allow write: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin();
    }
    
    // Blogs can be read by anyone in the club.
    // Writes are restricted to admins.
    match /blogs/{blogId} {
      allow read: if request.auth != null;
      allow write: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin();

      // Comments on blogs can be read by anyone in the club.
      // Any authenticated user who is a member can create a comment.
      // Only the comment author or an admin can delete a comment.
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.authorId && isClubMember(get(/databases/$(database)/documents/blogs/$(blogId)).data.clubId);
        allow delete: if request.auth.uid == resource.data.authorId || isClubAdmin(get(/databases/$(database)/documents/blogs/$(blogId)).data.clubId) || isSiteAdmin();
      }
    }
    
    match /publicBlogPosts/{postId} {
      allow read: if true;
      allow write: if isSiteAdmin() || isClubAdmin(get(/databases/$(database)/documents/blogs/$(postId)).data.clubId);
    }

    // Public collections are read-only for all users.
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false; 
    }
    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if false; 
    }
    
    // Help documents are readable by any authenticated user.
    // Writes are restricted to site admins.
    match /helpDocuments/{docId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin();
    }
  }
}
