rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper to get user's role from their user document
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper to check if a user is a Site Admin
    function isSiteAdmin() {
      // Security note: This makes a DB read. For performance, custom claims are better,
      // but for simplicity and correctness, this is valid.
      return isSignedIn() && getUserRole(request.auth.uid) == 'Site Admin';
    }

    // Helper to check if a user is a Club Admin for a specific club
    function isClubAdmin(clubId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return isSignedIn() &&
             userDoc.role == 'Club Admin' &&
             userDoc.primaryClubId == clubId;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      // Allow any signed-in user to create their own user document during onboarding.
      allow create: if isSignedIn();
      // Allow user to update their own profile,
      // Or allow a Site Admin to update any profile,
      // Or allow a Club Admin to update a user in their club
      allow update: if isUser(userId) || isSiteAdmin() || isClubAdmin(resource.data.primaryClubId);
      // Only Site Admins can delete users.
      allow delete: if isSiteAdmin();
    }

    match /clubs/{clubId} {
      allow read: if isSignedIn();
      // Only Site Admins can create, update, or delete clubs.
      allow create, update, delete: if isSiteAdmin();
    }

    match /series/{seriesId} {
      allow read: if isSignedIn();
      // Allow Site or Club Admin of the series' club to manage it.
      // Use request.resource.data for create/update, and resource.data for delete.
      allow create, update: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }

    match /matches/{matchId} {
      allow read: if isSignedIn();
      // Allow Site or Club Admin to create/update
      // Note: Using `request.resource.data` is crucial here for create/update.
      allow create, update: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    match /results/{resultId} {
        allow read: if isSignedIn();
        // Allow Site/Club Admins to manage results
        allow create, update, delete: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }

    // Public collections are read-only for all users.
    match /publicMatches/{matchId} {
        allow read: if true;
        allow write: if false; // Should only be written from a trusted backend environment
    }
    
    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if false; // Should only be written from a trusted backend environment
    }
    
    match /helpDocuments/{docId} {
        allow read: if isSignedIn();
        // Only Site Admins can manage help documents
        allow create, update, delete: if isSiteAdmin();
    }
  }
}
