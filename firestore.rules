
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Is the requesting user a Site Admin?
    function isSiteAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    // Is the requesting user a Club Admin?
    function isClubAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Club Admin';
    }

    // Does the requesting user (must be a club admin) manage the club of the resource being accessed?
    function isClubAdminForResource(resource) {
       return isClubAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      // Allow update if user is updating their own doc, or is a site admin, 
      // or is a club admin updating a user within their own club.
      allow update: if isUser(userId) || isSiteAdmin() || 
                    (isClubAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.primaryClubId);
      // Only Site Admins can permanently delete user documents.
      allow delete: if isSiteAdmin();
    }

    // Rules for 'clubs' collection
    match /clubs/{clubId} {
      allow read: if isSignedIn();
      // Only Site Admins can create/delete clubs
      allow create, delete: if isSiteAdmin();
      // Allow update if Site Admin, or if Club Admin for that specific club.
      allow update: if isSiteAdmin() || isClubAdminForResource(resource);
    }
    
    // Rules for 'series' collection
    match /series/{seriesId} {
        allow read: if isSignedIn();
        // Allow create/update/delete if Site Admin or a Club Admin for the relevant club
        allow create, update, delete: if isSiteAdmin() || isClubAdminForResource(request.resource);
    }

    // Rules for 'matches' collection
    match /matches/{matchId} {
      allow read: if isSignedIn();
      // Allow create/delete if Site Admin or Club Admin of the relevant club.
      // The resource is the *new* document being written.
      allow create, delete: if isSiteAdmin() || isClubAdminForResource(request.resource);
      // Allow update if Site Admin or Club Admin of the relevant club.
      // The resource is the *existing* document on the server.
      allow update: if isSiteAdmin() || isClubAdminForResource(resource);
    }

    // Rules for 'results' collection
    match /results/{resultId} {
      allow read: if isSignedIn();
       // Allow create/update/delete if Site Admin or a Club Admin for the relevant club
      allow create, update, delete: if isSiteAdmin() || isClubAdminForResource(request.resource);
    }
    
    // Rules for 'helpDocuments' collection (Admin only write)
    match /helpDocuments/{docId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSiteAdmin();
    }
    
    // Rules for public-facing collections
    match /publicMatches/{matchId} {
      allow read: if true; // Publicly readable
      allow write: if false; // Should only be written from backend/admin context
    }
    
    match /publicUpcomingMatches/{matchId} {
      allow read: if true; // Publicly readable
      allow write: if false; // Should only be written from backend/admin context
    }
  }
}
