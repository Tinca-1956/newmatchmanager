rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to check user roles from their profile in the 'users' collection.
    function isClubOrSiteAdmin(userId, clubId) {
      let userRole = get(/databases/$(database)/documents/users/$(userId)).data.role;
      let userClubId = get(/databases/$(database)/documents/users/$(userId)).data.primaryClubId;
      return (userRole == 'Site Admin' || (userRole == 'Club Admin' && userClubId == clubId));
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    // Default Deny: Secure by default
    match /{path=**} {
      allow read, write: if false;
    }

    // USERS: Users can read/update their own profile. Admins can manage users in their club.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      // Admin access for management would typically be handled by a more complex rule
      // or through backend functions, but this covers the user's own access.
    }
    
    // CLUBS: All authenticated users can list/read clubs to select them.
    match /clubs/{clubId} {
      allow read: if isAuthenticated();
      // Write access is limited to Site Admins
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    // SERIES: Authenticated users can read series for their club. Admins can write.
    match /series/{seriesId} {
      allow read: if isAuthenticated();
      allow write: if isClubOrSiteAdmin(request.auth.uid, resource.data.clubId);
    }

    // MATCHES: Authenticated users can read matches for their club. Admins can write.
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isClubOrSiteAdmin(request.auth.uid, resource.data.clubId);
    }
    
    // RESULTS: Authenticated users can read results. Admins can write.
    match /results/{resultId} {
        allow read: if isAuthenticated();
        allow write: if isClubOrSiteAdmin(request.auth.uid, resource.data.clubId);
    }

    // BLOGS: Anglers can read, Admins can write.
    match /blogs/{blogId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isClubOrSiteAdmin(request.auth.uid, resource.data.clubId);

      // COMMENTS: Authenticated users can read/create. Admins or author can delete.
      match /comments/{commentId} {
        allow read, create: if isAuthenticated();
        allow delete: if isClubOrSiteAdmin(request.auth.uid, get(/databases/$(database)/documents/blogs/$(blogId)).data.clubId) || request.auth.uid == resource.data.authorId;
      }
    }
    
    // NOTIFICATIONS: Users can only read/write their own.
    match /notifications/{notificationId} {
      allow read, write, delete: if request.auth.uid == resource.data.userId;
    }

    // PUBLIC COLLECTIONS: Read-only for everyone, write is restricted.
    match /publicBlogPosts/{postId} {
      allow read: if true;
      // Writes are handled by admins via the client, so we need to allow them here.
      allow write: if isClubOrSiteAdmin(request.auth.uid, get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId);
    }

    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Should only be written from a trusted environment/admin action
    }
    
    match /publicUpcomingMatches/{matchId} {
       allow read: if true;
       allow write: if false; // Should only be written from a trusted environment/admin action
    }
    
    // STANDARD TEXTS: Admins can read and write.
    match /Standard_Texts/{textId} {
       allow read, write: if isClubOrSiteAdmin(request.auth.uid, resource.data.clubId);
    }
    
    // HELP DOCUMENTS: All users can read, admins can write/delete.
    match /helpDocuments/{docId} {
      allow read: if isAuthenticated();
      allow write, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }
  }
}