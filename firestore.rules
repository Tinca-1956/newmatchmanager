rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if a user has a specific role
    function hasRole(userId, role) {
      let userData = getUserData(userId);
      return userData.role == role;
    }

    // Helper function to check if a user is an admin of a specific club
    function isClubAdmin(userId, clubId) {
      let userData = getUserData(userId);
      return (hasRole(userId, 'Site Admin') || 
             (hasRole(userId, 'Club Admin') && userData.primaryClubId == clubId));
    }
    
    // Helper function to check if a user is a marshal for a specific club
    function isClubMarshal(userId, clubId) {
        let userData = getUserData(userId);
        return isClubAdmin(userId, clubId) || (hasRole(userId, 'Marshal') && userData.primaryClubId == clubId);
    }
    
    // Users Collection
    match /users/{userId} {
      // Anyone can create their own user document (on first sign-up)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can read their own data.
      // Other authenticated users can read limited data (for member lists etc).
      allow read: if request.auth != null;
      // Users can update their own data.
      // Admins can update other users' data.
      allow update: if request.auth != null && 
                      (request.auth.uid == userId || 
                       isClubAdmin(request.auth.uid, resource.data.primaryClubId) ||
                       hasRole(request.auth.uid, 'Site Admin'));
      // Only site admins can delete users.
      allow delete: if hasRole(request.auth.uid, 'Site Admin');
    }
    
    // Clubs Collection
    match /clubs/{clubId} {
      // Any authenticated user can read club listings.
      allow read: if request.auth != null;
      // Only Site Admins can create or delete clubs.
      allow create, delete: if hasRole(request.auth.uid, 'Site Admin');
      // Only a Site Admin or a Club Admin of that specific club can update it.
      allow update: if isClubAdmin(request.auth.uid, clubId);
    }
    
    // Series Collection
    match /series/{seriesId} {
      // Any authenticated user can read series info.
      allow read: if request.auth != null;
      // Only admins of the club this series belongs to can manage it.
      allow create, update, delete: if isClubAdmin(request.auth.uid, request.resource.data.clubId);
    }
    
    // Matches Collection
    match /matches/{matchId} {
      // Any authenticated user can read match info.
      allow read: if request.auth != null;
      // Only admins of the club this match belongs to can create/update it.
      allow create: if isClubAdmin(request.auth.uid, request.resource.data.clubId);
      allow update: if isClubAdmin(request.auth.uid, resource.data.clubId);
      // Allow cancellation (deletion) only by club admins
      allow delete: if isClubAdmin(request.auth.uid, resource.data.clubId);
    }
    
    // Results Collection
    match /results/{resultId} {
      // Any authenticated user can read results.
      allow read: if request.auth != null;
      // Only admins or marshals of the club can create/update results (for weigh-ins).
      allow create, update: if isClubMarshal(request.auth.uid, request.resource.data.clubId);
      // Only club admins can delete results.
      allow delete: if isClubAdmin(request.auth.uid, resource.data.clubId);
    }
  }
}