
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isClubAdmin(clubId) {
      // Checks if the requesting user is a Club Admin of the specified club.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Club Admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId;
    }

    function isSiteAdmin() {
      // Checks if the requesting user is a Site Admin.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }
    
    function isUserInClub(clubId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId;
    }

    // Simplified read for any authenticated user, more specific writes.
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      // Site Admin can do anything. Club Admin can only update specific fields.
      allow write: if isSiteAdmin(); 
      allow update: if isSiteAdmin() || (isClubAdmin(clubId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'imageUrl']));
    }

    // Rules for the users collection
    match /users/{userId} {
        // A user can read their own profile.
        // A Site Admin can read any user profile.
        // A Club Admin can read profiles of users in their own club.
        allow read: if request.auth.uid == userId || isSiteAdmin() || isClubAdmin(resource.data.primaryClubId);
        
        // A user can update their own profile.
        // Admins can update user profiles in their club.
        allow update: if request.auth.uid == userId || isSiteAdmin() || isClubAdmin(resource.data.primaryClubId);
        
        // Only a site admin can create or delete user records directly.
        allow create, delete: if isSiteAdmin();
    }

    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }

    match /matches/{matchId} {
      allow read: if request.auth != null;
      allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      allow update: if isSiteAdmin() || isClubAdmin(resource.data.clubId) || 
                      (request.auth.uid in resource.data.registeredAnglers == false &&
                       request.resource.data.registeredAnglers.size() == resource.data.registeredAnglers.size() + 1 &&
                       request.auth.uid in request.resource.data.registeredAnglers &&
                       request.resource.data.registeredCount == resource.data.registeredCount + 1);
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    match /results/{resultId} {
        allow read: if request.auth != null;
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
    
    match /Standard_Texts/{textId} {
        allow read: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
    
    match /helpDocuments/{docId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin();
    }
    
    match /publicMatches/{matchId} {
        allow read: if true;
        allow write: if false; // Only backend can write
    }

    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if false; // Only backend can write
    }
    
    match /blogs/{blogId} {
        allow read: if request.auth != null;
        allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
        allow update, delete: if isSiteAdmin() || (request.auth.uid == resource.data.authorId);
        
        match /comments/{commentId} {
            allow read: if request.auth != null;
            // Allow members of the club to comment
            allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == get(/databases/$(database)/documents/blogs/$(blogId)).data.clubId;
        }
    }
    
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId) || request.auth != null; // allow any auth user to trigger a comment notification
    }

    match /tags/{tagId} {
        allow read: if request.auth != null;
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
  }
}
