rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function requestingUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isSiteAdmin() {
      return requestingUserData().role == 'Site Admin';
    }
    
    function isClubAdminOrMarshal(clubId) {
       return request.auth != null && 
              (requestingUserData().role in ['Club Admin', 'Marshal']) &&
              requestingUserData().primaryClubId == clubId;
    }

    // Rules for Collections
    match /users/{userId} {
      // Users can read/write their own data.
      // Admins/Marshals can read data of users in their own club.
      allow read: if isOwner(userId) || 
                   (isClubAdminOrMarshal(requestingUserData().primaryClubId) && get(/databases/$(database)/documents/users/$(userId)).data.primaryClubId == requestingUserData().primaryClubId);
      allow create: if request.auth != null;
      allow update: if isOwner(userId) || isSiteAdmin() || isClubAdminOrMarshal(requestingUserData().primaryClubId);
    }

    match /clubs/{clubId} {
      // Allow read access for all authenticated users, write for admins.
      allow read: if request.auth != null;
      allow create, update, delete: if isSiteAdmin() || isClubAdminOrMarshal(clubId);
    }
    
    match /series/{seriesId} {
      // Allow read for all authenticated users.
      // Allow write for admins/marshals of the club the series belongs to.
      allow read: if request.auth != null;
      allow create, update, delete: if isSiteAdmin() || isClubAdminOrMarshal(request.resource.data.clubId);
    }
    
    match /matches/{matchId} {
        // Read: Any authenticated user can read match details.
        // Write/Update: Admins/Marshals of the club can manage matches.
        // Update (Register): Any authenticated user can register by adding their ID to the array.
        allow read: if request.auth != null;
        allow create, update, delete: if isSiteAdmin() || isClubAdminOrMarshal(request.resource.data.clubId);
        allow update: if request.auth != null && 
                       request.resource.data.registeredAnglers == resource.data.registeredAnglers.concat([request.auth.uid]);
    }

    match /results/{resultId} {
       // Read: Any authenticated user can read results.
       // Write: Admins/Marshals can create/update results for their club.
       allow read: if request.auth != null;
       allow create, update, delete: if isSiteAdmin() || isClubAdminOrMarshal(request.resource.data.clubId);
    }
  }
}
