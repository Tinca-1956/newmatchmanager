rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Returns true if the user has the 'Site Admin' role.
    function isSiteAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    // Returns true if the user is a 'Club Admin' of the specified clubId.
    function isClubAdmin(clubId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userDoc.role == 'Club Admin' && userDoc.primaryClubId == clubId;
    }
    
    // Returns true if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      // Admins can read, update, and list all user profiles.
      // This is necessary for managing members, assigning roles, etc.
      allow read, list, update: if isSiteAdmin() || isClubAdmin(resource.data.primaryClubId);

      // A user can read their own profile.
      allow get: if isOwner(userId);
      
      // A new user can create their own profile document once.
      allow create: if request.auth.uid == userId && !exists(/databases/$(database)/documents/users/$(userId));

      // An existing user can update their own profile information.
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['firstName', 'lastName', 'primaryClubId']);
    }

    match /clubs/{clubId} {
      // Anyone can read club information for display purposes.
      allow get, list: if true;
      
      // Site Admins can create, update, and delete clubs.
      allow create, update, delete: if isSiteAdmin();

      // A Club Admin can update their own club's details (e.g., description, image).
      allow update: if isClubAdmin(clubId);
    }
    
    match /series/{seriesId} {
      // Authenticated users can read series information.
      allow read, list: if request.auth != null;
      
      // Admins can create, update, and delete series for their club.
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }

    match /matches/{matchId} {
      // Authenticated users can read match data.
      allow read: if request.auth != null;

      // Admins can create, update, and delete matches for their club.
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      
      // A user can register for a match (update the registeredAnglers array).
      allow update: if request.auth != null 
                    && 'registeredAnglers' in request.resource.data.diff(resource.data).affectedKeys;

      // Admins can list matches for their own club (needed for Series page check).
      allow list: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    match /results/{resultId} {
        // Authenticated users can read individual results.
        allow read: if request.auth != null;
        
        // Admins can write results for their own club.
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);

        // Admins can list results for their own club (needed for various views).
        allow list: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    match /helpDocuments/{docId} {
        // All authenticated users can read help documents.
    	allow read: if request.auth != null;
      // Only Site Admins can create or delete help documents.
      allow write: if isSiteAdmin();
    }
    
    // PUBLIC-FACING RULES
    match /publicMatches/{matchId} {
    	// Anyone can read published match results.
    	allow get, list: if true;
      // Only Admins can write (publish) to this collection (via a function).
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
    
    match /publicUpcomingMatches/{matchId} {
    	// Anyone can read upcoming match details.
    	allow get, list: if true;
      // Only Admins can write to this collection.
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
  }
}