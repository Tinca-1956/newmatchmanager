rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isClubMember(clubId) {
      return isAuth() && getUserData().primaryClubId == clubId;
    }
    
    function isSiteAdmin() {
      return isAuth() && getUserData().role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
        return isClubMember(clubId) && (isSiteAdmin() || getUserData().role == 'Club Admin');
    }

    // Rules
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isUser(userId) || isSiteAdmin();
    }

    match /clubs/{clubId} {
      allow read: if isAuth();
      allow write: if isSiteAdmin() || isClubAdmin(clubId);
    }
    
    match /series/{seriesId} {
      allow read: if isAuth();
      allow write: if isClubAdmin(request.resource.data.clubId);
    }

    match /matches/{matchId} {
      allow read: if isAuth();
      
      // Allow creation if the user is a club admin for the club being assigned
      allow create: if isClubAdmin(request.resource.data.clubId);
      
      // Allow update for two scenarios:
      // 1. A club admin can update any field.
      // 2. Any authenticated user can update ONLY to register/unregister themselves.
      allow update: if (isClubAdmin(resource.data.clubId))
                    || 
                    (isAuth() && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['registeredAnglers', 'registeredCount']));
                        
      allow delete: if isClubAdmin(resource.data.clubId);
    }
    
    match /results/{resultId} {
      allow read: if isAuth();
      allow write: if isClubAdmin(request.resource.data.clubId);
    }

    match /blogs/{blogId} {
      allow read: if isAuth();
      allow create, update, delete: if isClubAdmin(request.resource.data.clubId) || (isClubAdmin(resource.data.clubId) && request.auth.uid == resource.data.authorId);
      
      match /comments/{commentId} {
        allow read: if isAuth();
        allow create: if isAuth(); // Any authenticated user can comment
      }
    }
    
    match /tags/{tagId} {
      allow read: if isAuth();
      allow write: if isClubAdmin(request.resource.data.clubId);
    }

     match /notifications/{notificationId} {
      allow read, write: if isUser(resource.data.userId);
      allow create: if isAuth();
    }
    
    match /Standard_Texts/{textId} {
      allow read: if isAuth();
      allow write: if isClubAdmin(request.resource.data.clubId);
    }

    // Public collections are read-only for all, writeable by no one from the client.
    // They are managed by server-side logic (e.g., cloud functions or admin actions).
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /publicBlogPosts/{postId} {
      allow read: if true;
      allow write: if false;
    }
  }
}