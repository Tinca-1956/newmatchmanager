rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default-deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Allow authenticated users to read/write their own user document
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }
    
    // Allow any authenticated user to read the list of clubs
    match /clubs/{clubId} {
      allow read: if request.auth != null;
    }
    
    // Site Admins can create/update/delete clubs
    match /clubs/{clubId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }
    
    // Club Admins can update their own club details
    match /clubs/{clubId} {
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Club Admin';
    }

    // Allow members of a club to read series and matches for that club
    match /series/{seriesId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId;
    }
    
     match /matches/{matchId} {
      allow read: if request.auth != null;
    }
    
    // Allow authenticated users to read results, scoped to their club
    match /results/{resultId} {
       allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId;
    }
    
    // Let site admins/club admins manage series, matches, results, and members
    match /series/{seriesId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin'];
    }

    match /matches/{matchId} {
      allow create, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin'];
      // Allow authenticated users to register for a match (update the registeredAnglers array)
      allow update: if request.auth != null && request.auth.uid in request.resource.data.registeredAnglers;
    }
    
    match /results/{resultId} {
       allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin'];
    }

    match /users/{userId} {
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin'];
    }
    
    // Allow Site Admins to delete users (soft delete)
    match /users/{userId} {
        allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    // Help documents can be read by any authenticated user
    match /helpDocuments/{docId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    // NEW: Allow public read access to published match results
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Should only be written from a trusted backend/admin
    }

    // NEW: Allow public read access to upcoming matches
    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Should only be written from a trusted backend/admin
    }
  }
}
