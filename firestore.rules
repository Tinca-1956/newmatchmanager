rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is a Site Admin
    function isSiteAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }
    
    // Helper function to check if a user is a Club Admin for a specific club
    function isClubAdmin(clubId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userDoc.role == 'Club Admin' && userDoc.primaryClubId == clubId;
    }

    match /users/{userId} {
      // Any authenticated user can create their own user document.
      // Any authenticated user can read their own user document.
      // Club Admins and Site Admins can read user documents within their club.
      // Only the user themselves or a Site Admin can update a user document.
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         isSiteAdmin() ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.primaryClubId);
         
      allow create: if request.auth != null;
      
      allow update: if request.auth != null && 
        (request.auth.uid == userId || 
         isSiteAdmin() || 
         (isClubAdmin(resource.data.primaryClubId)));
    }

    match /clubs/{clubId} {
      // Any authenticated user can read club information.
      // A Site Admin can create, update, or delete any club.
      // A Club Admin can only update the description and imageUrl of their own club.
      allow read: if request.auth != null;
      allow create, delete: if isSiteAdmin();
      allow update: if isSiteAdmin() || 
        (isClubAdmin(clubId) && request.resource.data.keys().hasOnly(['description', 'imageUrl', 'name', 'subscriptionExpiryDate']));
    }
    
    match /series/{seriesId} {
        // Any authenticated user can read series information.
        // A Site Admin or a Club Admin of the associated club can write/delete.
        allow read: if request.auth != null;
        allow write: if isSiteAdmin() || isClubAdmin(get(/databases/$(database)/documents/clubs/$(request.resource.data.clubId)).data.id);
    }
    
    match /matches/{matchId} {
      // Anyone can read a match document.
      allow read: if true;
      // Allow creation if the user is a site admin or a club admin for the club being assigned.
      allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      // Allow updates if user is a Site Admin or a Club Admin of the match's club.
      // Also allow any authenticated user to update ONLY the registeredAnglers and registeredCount fields for self-registration.
      allow update: if request.auth != null && (
          (isSiteAdmin() || isClubAdmin(resource.data.clubId)) ||
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']))
       );
      // Allow deletion only if the user is a site admin or a club admin of that club
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }

    match /results/{resultId} {
        // Any authenticated user can read results.
        allow read: if request.auth != null;
        // Site Admins or Club Admins of the result's club can write.
        allow write: if request.auth != null && (isSiteAdmin() || isClubAdmin(request.resource.data.clubId));
    }
    
    match /Standard_Texts/{textId} {
      allow read: if request.auth != null &&
        (isSiteAdmin() ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId);

      allow create, update: if request.auth != null &&
        (isSiteAdmin() || isClubAdmin(request.resource.data.clubId));
         
      allow delete: if request.auth != null &&
        (isSiteAdmin() || isClubAdmin(resource.data.clubId));
    }
    
    match /helpDocuments/{documentId} {
        // Any authenticated user can read help documents.
        // Only Site Admins can write/delete help documents.
        allow read: if request.auth != null;
        allow write: if isSiteAdmin();
    }
    
    match /blogs/{postId} {
        // Any authenticated user can read blog posts.
        // Site Admins and Club Admins of the post's club can write/delete.
        allow read: if request.auth != null;
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
        
        match /comments/{commentId} {
             // Any authenticated member of the club can read or post comments.
             allow read: if request.auth != null && isClubAdmin(get(/databases/$(database)/documents/blogs/$(postId)).data.clubId);
             allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.memberStatus == 'Member';
        }
    }

    match /publicMatches/{postId} {
      allow read: if true;
      allow write: if isSiteAdmin() || isClubAdmin(get(/databases/$(database)/documents/blogs/$(postId)).data.clubId);
    }

    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if isSiteAdmin(); // Only site admin can sync this collection
    }
    
    match /notifications/{notificationId} {
        // A user can read/update their own notifications.
        allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
        // A server process or admin action can create notifications.
        allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
    
    match /tags/{tagId} {
        allow read: if request.auth != null;
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
    
    // Add a catch-all to deny all other reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
