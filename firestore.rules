rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSiteAdmin() {
      return request.auth.token.role == 'Site Admin';
    }
    
    function isClubAdmin(clubId) {
      // Check if the user making the request has the 'Club Admin' role and
      // if their primaryClubId (from their user document) matches the clubId of the resource they are trying to access.
      return request.auth.token.role == 'Club Admin' 
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId;
    }

    // USER documents can be read by any authenticated user, but only written to by the user themselves.
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid == userId || isSiteAdmin();
    }
    
    // CLUBS can be read by any authenticated user.
    // Creation is restricted to Site Admins.
    // Writing (editing) is restricted to Site Admins or a Club Admin of that specific club.
    match /clubs/{clubId} {
      allow read: if request.auth.uid != null;
      allow create: if isSiteAdmin();
      // Use resource.data.id for writes, but since clubId is the doc id, it's equivalent.
      allow update: if isSiteAdmin() || isClubAdmin(clubId);
    }
    
    // SERIES can be read by any authenticated user.
    // Creation and writing are restricted to Site Admins or a Club Admin of the associated club.
     match /series/{seriesId} {
      allow read: if request.auth.uid != null;
      // On create, check the clubId from the NEW data being sent.
      allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      // On update, check the clubId from the EXISTING data in the database.
      allow update: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    // MATCHES can be read by any authenticated user.
    // Creation and writing are restricted to Site Admins or a Club Admin of the associated club.
    match /matches/{matchId} {
      allow read: if request.auth.uid != null;
      allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      allow update: if isSiteAdmin() || isClubAdmin(resource.data.clubId) || request.resource.data.registeredAnglers.hasAny([request.auth.uid]);
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    // RESULTS can be read by any authenticated user.
    // Writing is allowed by any authenticated user (e.g., marshals, admins).
    match /results/{resultId} {
      allow read: if request.auth.uid != null;
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }

    // Public collections are readable by anyone, but writable only by admins.
    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
    
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
  }
}
