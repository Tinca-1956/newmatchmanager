
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the requesting user's role is one of the allowed roles.
    // It reads the user's own profile document.
    function isUserRole(allowedRoles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in allowedRoles;
    }

    // Admins can read the entire users collection to manage members.
    // Anglers can only read their own profile.
    match /users/{userId} {
      allow read: if isUserRole(['Site Admin', 'Club Admin']) || request.auth.uid == userId;
      allow write: if isUserRole(['Site Admin', 'Club Admin']) || request.auth.uid == userId;
    }

    match /clubs/{clubId} {
      allow read: if request.auth != null;
      // Only Site Admins can create or edit clubs.
      allow write: if isUserRole(['Site Admin']);
    }

    match /series/{seriesId} {
      allow read: if request.auth != null;
      // Site Admins and Club Admins can write to series.
      allow write: if isUserRole(['Site Admin', 'Club Admin']);
    }

    match /matches/{matchId} {
      allow read: if request.auth != null;
      // Site Admins and Club Admins can write to matches.
      allow write: if isUserRole(['Site Admin', 'Club Admin']);
    }

    match /results/{resultId} {
      allow read: if request.auth != null;
      // Site Admins and Club Admins can write to results.
      allow write: if isUserRole(['Site Admin', 'Club Admin']);
    }
  }
}
