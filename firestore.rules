rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSiteAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    function isClubAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Club Admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // /users/{userId}
    match /users/{userId} {
      allow list, get: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isSiteAdmin();
    }

    // /clubs/{clubId}
    match /clubs/{clubId} {
      allow read: if true; // Publicly readable for public dashboard
      allow create: if isSiteAdmin();
      allow update: if isSiteAdmin() || (isClubAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId);
      allow delete: if isSiteAdmin();
    }

    // /series/{seriesId}
    match /series/{seriesId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSiteAdmin() || isClubAdmin();
    }
    
    // /matches/{matchId}
    match /matches/{matchId} {
      allow read: if isSignedIn();
      
      allow create: if isSiteAdmin() || isClubAdmin();
      
      allow update: if isSiteAdmin() || isClubAdmin() || 
                      (isSignedIn() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']) &&
                       (
                         // Registration: user's ID is being added to the list
                         (request.resource.data.registeredAnglers.toSet().hasAll(resource.data.registeredAnglers.toSet()) && 
                          request.resource.data.registeredAnglers.size() == resource.data.registeredAnglers.size() + 1 &&
                          request.resource.data.registeredAnglers.hasAny([request.auth.uid])) ||
                         // Un-registration: user's ID is being removed from the list
                         (resource.data.registeredAnglers.toSet().hasAll(request.resource.data.registeredAnglers.toSet()) && 
                          request.resource.data.registeredAnglers.size() == resource.data.registeredAnglers.size() - 1 &&
                          !request.resource.data.registeredAnglers.hasAny([request.auth.uid]) &&
                          resource.data.registeredAnglers.hasAny([request.auth.uid]))
                       )
                      );
                      
      allow delete: if (isSiteAdmin() || isClubAdmin()) && resource.data.registeredCount == 0;
    }
    
    // /results/{resultId}
    match /results/{resultId} {
      allow read: if true;
      allow write: if isSiteAdmin() || isClubAdmin();
    }

    // /Standard_Texts/{textId}
    match /Standard_Texts/{textId} {
        allow read, write: if isSiteAdmin() || isClubAdmin();
    }

    // /helpDocuments/{docId}
    match /helpDocuments/{docId} {
      allow read: if true;
      allow write: if isSiteAdmin();
    }
    
    // /publicMatches/{matchId} - Publicly readable results
    match /publicMatches/{matchId} {
        allow read: if true;
        allow write: if isSiteAdmin() || isClubAdmin(); // Only admins can publish
    }
    
    // /publicUpcomingMatches/{matchId} - Publicly readable upcoming matches
    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if isSiteAdmin() || isClubAdmin(); // Only admins can publish
    }
  }
}