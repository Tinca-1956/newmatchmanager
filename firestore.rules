rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Rules for the 'publicMatches' collection
    // ANYONE, including unauthenticated users, can read the public match results.
    // WRITE access should be restricted to backend/admin functions only.
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Protect public data from client-side writes
    }
    
    // Rules for the 'publicUpcomingMatches' collection
    // ANYONE, including unauthenticated users, can read the public upcoming match data.
    // WRITE access should be restricted to backend/admin functions only.
    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if false; // Protect public data from client-side writes
    }

    // Rules for the 'clubs' collection
    // ANY authenticated user can read the list of clubs.
    // WRITE access is restricted to Site Admins.
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'Site Admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      
      // ANY authenticated user can read their own document.
      allow read: if request.auth.uid == userId;

      // Site Admins can read any user document.
      allow get: if request.auth.token.role == 'Site Admin';
      
      // Site Admins can list the users collection. This is required for queries.
      allow list: if request.auth.token.role == 'Site Admin';

      // ANY authenticated user can create their own document.
      allow create: if request.auth.uid == userId;
      
      // Allow users to update their own profile, but NOT their role or status.
      allow update: if request.auth.uid == userId
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.memberStatus == resource.data.memberStatus;

      // Allow Site Admins or Club Admins to update ANY user document
      // (e.g., changing role, status).
      allow update: if request.auth.token.role == 'Site Admin' 
                    || (request.auth.token.role == 'Club Admin' && request.resource.data.primaryClubId == resource.data.primaryClubId);
                    
      // Allow Site Admins to delete any user.
      allow delete: if request.auth.token.role == 'Site Admin';
    }

    // Rules for the 'series' collection
    // Authenticated users can read series that belong to their primary club.
    // Site Admins and Club Admins can write to series in their club.
    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'Site Admin'
                   || (request.auth.token.role == 'Club Admin' && get(/databases/$(database)/documents/series/$(seriesId)).data.clubId == request.auth.token.clubId);
    }
    
    // Rules for the 'matches' collection
    // Let any authenticated user read any match document.
    // Write access is limited to admins.
    match /matches/{matchId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'Site Admin' || request.auth.token.role == 'Club Admin';
    }

    // Rules for the 'results' collection
    // Let any authenticated user read any results document.
    // Write access is limited to admins and marshals.
    match /results/{resultId} {
        allow read: if request.auth != null;
        allow write: if request.auth.token.role == 'Site Admin' 
                     || request.auth.token.role == 'Club Admin' 
                     || request.auth.token.role == 'Marshal';
    }
  }
}
