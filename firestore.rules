rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isSiteAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      let userPrimaryClubId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;
      return userRole == 'Club Admin' && userPrimaryClubId == clubId;
    }

    // =============================================
    //                 APPLICATIONS
    // =============================================
    match /applications/{applicationId} {
        // A user can create their own application
        allow create: if request.auth.uid == request.resource.data.userId;

        // Site Admins can read/list all applications
        allow get, list: if isSiteAdmin();

        // Club Admins can read/list applications for their club
        allow get, list: if isClubAdmin(resource.data.clubId);
        
        // Admins can update the status
        allow update: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    // =============================================
    //                 CLUBS
    // =============================================
    match /clubs/{clubId} {
      // Anyone authenticated can view club lists
      allow read: if request.auth != null;
      
      // Only Site Admins can create, update, or delete clubs
      allow write: if isSiteAdmin();
    }
    
    // =============================================
    //                 MATCHES
    // =============================================
    match /matches/{matchId} {
        // Site Admins can read/list any match
        allow get, list: if isSiteAdmin();
        
        // Club Admins can read/list matches for their club
        allow get, list: if isClubAdmin(resource.data.clubId);

        // Authenticated users can read matches for their primary club
        allow get, list: if request.auth != null && resource.data.clubId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;
        
        // Only Admins can create/update/delete matches
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }

    // =============================================
    //                 RESULTS
    // =============================================
     match /results/{resultId} {
        // Site Admins can read/list any result
        allow get, list: if isSiteAdmin();
        
        // Club Admins can read/list results for their club
        allow get, list: if isClubAdmin(resource.data.clubId);

        // Authenticated users can read results for their primary club
        allow get, list: if request.auth != null && resource.data.clubId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;
        
        // Only Admins can create/update/delete results
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
     }
     
    // =============================================
    //                 SERIES
    // =============================================
    match /series/{seriesId} {
        // Site Admins can read/list any series
        allow get, list: if isSiteAdmin();
        
        // Club Admins can read/list series for their club
        allow get, list: if isClubAdmin(resource.data.clubId);

        // Authenticated users can read series for their primary club
        allow get, list: if request.auth != null && resource.data.clubId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;
        
        // Only Admins can create/update/delete series
        allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
     
    // =============================================
    //                 USERS
    // =============================================
    match /users/{userId} {
      // GET (Single Document) Rules
      // Allow a user to read their own profile
      allow get: if request.auth.uid == userId;
      // Allow a Site Admin to read any user profile
      allow get: if isSiteAdmin();
      // Allow a Club Admin to read profiles of users in their club
      allow get: if isClubAdmin(resource.data.primaryClubId);
      
      // LIST (Query) Rules
      // Allow a Site Admin to list all users without restriction
      allow list: if isSiteAdmin();
      // Allow Club Admins and Anglers to list users only from their own club
      allow list: if request.auth != null && 
                  request.query.where.get('primaryClubId')[2] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;

      // WRITE Rules
      // Allow users to update their own profile (firstName, lastName, primaryClubId)
      allow update: if request.auth.uid == userId && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['firstName', 'lastName', 'primaryClubId']);
                      
      // Allow admins to update user roles and status
      allow update: if (isSiteAdmin() || isClubAdmin(resource.data.primaryClubId)) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'memberStatus', 'firstName', 'lastName']);
                      
      // Allow users to be created during signup flow
      allow create: if request.auth.uid == userId;
      
      // Allow Site Admins to delete users (soft delete is an update, hard delete is separate)
      allow delete: if isSiteAdmin();
    }
  }
}