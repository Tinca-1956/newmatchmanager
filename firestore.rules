
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // Use token claims for list/query operations as they don't require a 'get'
    function isSiteAdmin() {
      return request.auth.token.role == 'Site Admin';
    }
    
    function isClubAdmin() {
      return request.auth.token.role == 'Club Admin';
    }
    
    // Use a direct 'get' for single-document reads where performance is less critical
    function isUserSiteAdmin(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Site Admin';
    }

    // --- Collection Rules ---
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isUserSiteAdmin(request.auth.uid);
      allow write: if request.auth.uid == userId || isUserSiteAdmin(request.auth.uid);
      allow list: if isSiteAdmin();
    }
    
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin();
    }

    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin() || isClubAdmin();
    }
    
    match /matches/{matchId} {
      allow get: if request.auth != null;
      allow read, write: if isSiteAdmin() || isClubAdmin();
      
      // THIS IS THE CRITICAL FIX:
      // Allow a user to list matches if:
      // 1. They are a Site Admin (can list any club's matches)
      // 2. The clubId in their query matches their primaryClubId claim.
      allow list: if isSiteAdmin() || request.query.where[0][2] == request.auth.token.primaryClubId;
    }
    
    match /results/{resultId} {
        allow read: if request.auth != null;
        allow write: if isSiteAdmin() || isClubAdmin();
    }
  }
}
