rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isSiteAdmin() {
      return isSignedIn() && getUserRole() == 'Site Admin';
    }

    function isClubAdmin() {
        return isSignedIn() && getUserRole() == 'Club Admin';
    }

    function getUserClubId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.primaryClubId;
    }

    function isUpdatingClubMember(clubId) {
        return getUserClubId(request.auth.uid) == clubId;
    }
    
    function isUpdatingOwnProfile() {
      return request.resource.data.keys().hasOnly(['firstName', 'lastName', 'primaryClubId']);
    }

    function isRegisteringForMatch() {
        // Check that only 'registeredAnglers' and 'registeredCount' are being changed.
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']);
    }

    function isLeavingMatch() {
        return request.auth.uid in resource.data.registeredAnglers;
    }

    function isJoiningMatch() {
        return !(request.auth.uid in resource.data.registeredAnglers);
    }
    
    match /clubs/{clubId} {
      // Anyone can read club info (for public dashboard, club selection, etc.)
      allow read: if true;
      // Only site admins can create new clubs
      allow create: if isSiteAdmin();
      // Site admins can edit any club, club admins can only edit their own club's description and image
      allow update: if isSiteAdmin() || 
                     (isClubAdmin() && isUpdatingClubMember(clubId) && request.resource.data.keys().hasOnly(['description', 'imageUrl']));
      // Only site admins can delete clubs
      allow delete: if isSiteAdmin();
    }
    
    match /users/{userId} {
      allow list, get: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isUpdatingOwnProfile()
                      || isSiteAdmin()
                      || (isClubAdmin() && isUpdatingClubMember(request.resource.data.primaryClubId));
      allow delete: if isSiteAdmin();
    }
    
    match /series/{seriesId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isSiteAdmin() || isClubAdmin();
    }

    match /matches/{matchId} {
        allow read: if isSignedIn();
        
        allow create: if isSiteAdmin() || isClubAdmin();
        
        // This is the combined, complex update rule
        allow update: if (isSiteAdmin() || isClubAdmin())
                      // An Angler can update a match IF...
                      || (isRegisteringForMatch() && (
                            // they are joining (and not already in the list)
                            (isJoiningMatch() && request.auth.uid in request.resource.data.registeredAnglers) ||
                            // OR they are leaving (and are already in the list)
                            (isLeavingMatch() && !(request.auth.uid in request.resource.data.registeredAnglers))
                         ));

        allow delete: if isSiteAdmin() || isClubAdmin();
    }
    
    match /results/{resultId} {
      allow read, list: if true;
      allow create, update, delete: if isSiteAdmin() || isClubAdmin();
    }
    
    match /publicMatches/{matchId} {
        allow read: if true;
        allow write: if false; // Should only be written from a trusted server/function
    }
    
    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if false;
    }
    
    match /Standard_Texts/{textId} {
        allow read, write: if isSiteAdmin() || isClubAdmin();
    }
    
    match /helpDocuments/{docId} {
        allow read: if true;
        allow write: if isSiteAdmin();
    }
  }
}
