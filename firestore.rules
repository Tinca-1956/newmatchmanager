rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isUserInRole(userId, roles) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role in roles;
    }
    
    function isClubAdmin(userId) {
      return isUserInRole(userId, ['Club Admin', 'Site Admin']);
    }

    function isSiteAdmin(userId) {
      return isUserInRole(userId, ['Site Admin']);
    }

    // Collection Rules
    match /users/{userId} {
      allow get: if request.auth.uid == userId;
      allow list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isClubAdmin(request.auth.uid);
      allow delete: if isSiteAdmin(request.auth.uid);
    }

    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin(request.auth.uid);
    }

    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow write: if isClubAdmin(request.auth.uid);
    }

    match /matches/{matchId} {
      allow read: if request.auth != null;
      // Allow create/update if user is a club admin or site admin.
      // Allow user to update if they are being added to the registeredAnglers array.
      allow write: if isClubAdmin(request.auth.uid) || 
                   (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']) &&
                    request.resource.data.registeredAnglers.hasAny([request.auth.uid]));
    }
    
     match /results/{resultId} {
      allow read: if request.auth != null;
      allow write: if isClubAdmin(request.auth.uid);
    }
  }
}