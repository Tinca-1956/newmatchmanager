rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSiteAdmin() {
      return request.auth.token.role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      // Check if user has a 'Club Admin' role in their profile for the given club.
      // This is a simplified check; a more robust system might use a 'memberships' collection.
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.role == 'Club Admin' && userProfile.primaryClubId == clubId;
    }
    
    function isClubAdminForWrite(clubId) {
      // Allow if the user is a Site Admin OR a Club Admin for the specific club.
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return isSiteAdmin() || (userProfile.role == 'Club Admin' && userProfile.primaryClubId == clubId);
    }

    function isMarshal(clubId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.role == 'Marshal' && userProfile.primaryClubId == clubId;
    }

    // A user can read their own profile document.
    // Site Admins can read any user document.
    // A Club Admin can read profiles of users who are part of their club.
    match /users/{userId} {
      allow read: if isSiteAdmin() || request.auth.uid == userId
                   || (request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.primaryClubId);
      allow write: if isSiteAdmin() || request.auth.uid == userId; // Users can edit their own profiles
    }

    // Any authenticated user can read the list of clubs.
    // Only Site Admins can create, update, or delete clubs.
    match /clubs/{clubId} {
      allow read: if request.auth.uid != null;
      allow write: if isSiteAdmin();
    }
    
    // Any authenticated user can read series info.
    // Only admins of the club can write series info.
    match /series/{seriesId} {
      allow read: if request.auth.uid != null;
      allow write: if isClubAdminForWrite(resource.data.clubId);
    }
    
    // A user can read matches for a club they are a member of.
    // Admins of the club can write match data.
    match /matches/{matchId} {
      allow read: if isSiteAdmin() || (request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId);
      
      // Allow a user to register (update registeredAnglers) for a match in their club
      allow update: if isClubAdminForWrite(resource.data.clubId) 
                      || isMarshal(resource.data.clubId)
                      || (request.auth.uid != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']));
      
      allow create, delete: if isClubAdminForWrite(resource.data.clubId);
    }
    
    // A user can read results for a club they are a member of.
    // Admins or Marshals can write results data for matches in their club.
    match /results/{resultId} {
      allow read: if request.auth.uid != null;
      allow write: if isClubAdminForWrite(resource.data.clubId) || isMarshal(resource.data.clubId);
    }
    
    // Rules for applications
    match /applications/{applicationId} {
       allow read: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
       // A user can create an application for themselves.
       allow create: if request.auth.uid == request.resource.data.userId;
       // Only an admin of the target club can delete (i.e., accept/reject) an application.
       allow delete: if isClubAdmin(resource.data.clubId);
    }
    
     match /memberships/{membershipId} {
        allow read: if request.auth.uid != null;
        // Only a club admin for the club in the membership document can create it.
        allow create: if isClubAdminForWrite(request.resource.data.clubId);
        allow write, delete: if isClubAdminForWrite(resource.data.clubId);
    }
  }
}
