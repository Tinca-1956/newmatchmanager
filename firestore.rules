rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isUserRole(userId, roles) {
      let userData = getUserData(userId);
      return isAuth() && userData.role in roles;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth() && request.auth.uid == userId // Can update own doc
                       || isUserRole(request.auth.uid, ['Site Admin', 'Club Admin']); // Admins can update docs
    }

    // Rules for 'clubs' collection
    match /clubs/{clubId} {
      allow read: if isAuth();
      allow create: if isUserRole(request.auth.uid, ['Site Admin', 'Club Admin']);
      allow update: if isUserRole(request.auth.uid, ['Site Admin', 'Club Admin']);
      allow delete: if isUserRole(request.auth.uid, ['Site Admin']);
    }
    
    // Rules for 'series' collection
    match /series/{seriesId} {
      allow read: if isAuth();
      allow create, update: if isUserRole(request.auth.uid, ['Site Admin', 'Club Admin']);
    }
    
    // Rules for 'matches' collection
    match /matches/{matchId} {
      allow get, list: if isAuth();
      allow create, update: if isUserRole(request.auth.uid, ['Site Admin', 'Club Admin']);
    }
  }
}