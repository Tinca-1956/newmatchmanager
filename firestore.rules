
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isRole(role) {
      return request.auth.token.role == role;
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // PUBLIC COLLECTIONS
    match /clubs/{clubId} {
      allow list: if true;
      allow get: if isAuthenticated();
      allow write: if isRole('Site Admin');
    }

    match /publicMatches/{matchId} {
        allow read: if true;
        allow write: if isRole('Site Admin');
    }

    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if isRole('Site Admin');
    }

    // USER-SPECIFIC
    match /users/{userId} {
      // Allow any authenticated user to read/list users.
      // The application code handles filtering by club.
      // Allow users to create their own profile, and admins/themselves to update.
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if request.auth.uid == userId || isRole('Site Admin') || isRole('Club Admin');
      allow delete: if isRole('Site Admin');
    }

    // CLUB-SPECIFIC DATA
    match /series/{seriesId} {
       allow read: if isAuthenticated();
       allow create, update, delete: if isRole('Site Admin') || isRole('Club Admin');
    }

    match /matches/{matchId} {
       allow read: if isAuthenticated();
       allow create, update, delete: if isRole('Site Admin') || isRole('Club Admin');
    }

    match /results/{resultId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isRole('Site Admin') || isRole('Club Admin') || isRole('Marshal');
    }
  }
}
