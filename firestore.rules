rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isSiteAdmin() {
      return isAuth() && getUserData(request.auth.uid).role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      let userData = getUserData(request.auth.uid);
      return isAuth() && userData.role == 'Club Admin' && userData.primaryClubId == clubId;
    }

    // USERS collection rules
    match /users/{userId} {
      // READ: Users can read their own profile.
      // Site Admins can read any user's profile.
      // Club Admins can read profiles of users in their own club.
      allow read: if isAuth() && (
        request.auth.uid == userId ||
        isSiteAdmin() ||
        (isClubAdmin(resource.data.primaryClubId) && resource.data.primaryClubId != null)
      );

      // CREATE: Authenticated users can create their own user document.
      allow create: if isAuth() && request.auth.uid == userId;

      // UPDATE: Users can update their own profile.
      // Site Admins can update any user.
      // Club Admins can update users in their club.
      // A user cannot change their own role.
      // A Club Admin cannot change a Site Admin's role.
      allow update: if isAuth() && (
          (request.auth.uid == userId && request.resource.data.role == resource.data.role) ||
          isSiteAdmin() ||
          (isClubAdmin(resource.data.primaryClubId) && resource.data.role != 'Site Admin')
      );
      
      // DELETE: Not allowed for now to prevent orphaned data.
      allow delete: if false;
    }

    // CLUBS collection rules
    match /clubs/{clubId} {
      // READ: Any authenticated user can read club information.
      allow read: if isAuth();

      // CREATE, UPDATE: Only Site Admins or Club Admins can manage clubs.
      // We will refine this later. For now, any auth user can.
      allow write: if isAuth();
    }

  }
}
