rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSiteAdmin() {
      return request.auth.token.role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      // Club Admins can manage resources within their own club.
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return request.auth.token.role == 'Club Admin' && userProfile.primaryClubId == clubId;
    }
    
    function isMarshal(clubId) {
       let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
       return request.auth.token.role == 'Marshal' && userProfile.primaryClubId == clubId;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for specific collections
    
    match /users/{userId} {
      // Read: Users can read their own profile. Admins can read any profile.
      allow read: if isSignedIn() && (request.auth.uid == userId || isSiteAdmin());

      // Write: Users can create/update their own profile. Admins can update any profile.
      allow write: if isSignedIn() && (request.auth.uid == userId || isSiteAdmin());
    }

    match /clubs/{clubId} {
      // Read: Any signed-in user can read club information.
      allow read: if isSignedIn();
      
      // Write: Only Site Admins can create or update clubs.
      allow write: if isSiteAdmin();
    }

    match /series/{seriesId} {
        // Read: Any signed-in user can read series info.
        allow read: if isSignedIn();
        // Write: Admins of the club associated with the series can write.
        allow write: if isClubAdmin(resource.data.clubId);
    }

    match /matches/{matchId} {
      // Read: Any signed-in user can read match info.
      allow read: if isSignedIn();

      // Create: Club Admins can create matches for their club.
      allow create: if isClubAdmin(request.resource.data.clubId);

      // Update: Club Admins can update matches in their club.
      // Any signed-in user can update if they are only modifying the 'registeredAnglers' array (i.e., registering/unregistering).
      allow update: if isClubAdmin(resource.data.clubId) || 
                       (isSignedIn() && request.resource.data.keys().hasOnly(['registeredAnglers', 'registeredCount']));
    }
    
    match /results/{resultId} {
        // Read: Any signed-in user can read results.
        allow read: if isSignedIn();
        // Write: Only admins or marshals of the corresponding club can write results.
        allow write: if isClubAdmin(request.resource.data.clubId) || isMarshal(request.resource.data.clubId);
    }
    
    match /memberships/{membershipId} {
      // Allow a user to create their own membership request document.
      // This rule ensures the person creating the request is the same person
      // the request is for, by checking the userId field inside the document data.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;

      // Allow club admins or site admins to update/delete membership requests for their club.
      allow update, delete: if isClubAdmin(resource.data.clubId) || isSiteAdmin();
    }
  }
}
