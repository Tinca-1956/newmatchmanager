
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is a Site Admin.
    function isSiteAdmin() {
      return isSignedIn() && request.auth.token.role == 'Site Admin';
    }
    
    // Helper function to check if the user is an Admin of a specific club.
    function isClubAdmin(clubId) {
       return isSignedIn() && 
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Club Admin' &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId;
    }
    
    // Helper function to check if a user is a member of a specific club.
    function isClubMember(clubId) {
      // This is a simplified check. A more robust system might check a 'memberships' subcollection.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == clubId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user profile document.
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Users can only read their own profile. Site Admins or Admins of the user's club can read any profile in that club.
      allow read: if (isSignedIn() && request.auth.uid == userId) || 
                  isSiteAdmin() || 
                  (isClubAdmin(resource.data.primaryClubId));
                  
      // Users can update their own profile. Admins can update any profile in their club.
      allow update: if (isSignedIn() && request.auth.uid == userId) ||
                    isSiteAdmin() ||
                    isClubAdmin(resource.data.primaryClubId);
                    
      // Only Admins can delete users (soft delete).
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.primaryClubId);
    }
    
    // Rules for the 'clubs' collection
    match /clubs/{clubId} {
        // Any authenticated user can read the list of clubs.
        allow read: if isSignedIn();
        // Only Site Admins can create, update, or delete clubs.
        allow write: if isSiteAdmin();
    }

    // Rules for the 'series' collection
    match /series/{seriesId} {
        // Members of the club can read series information.
        allow read: if isClubMember(resource.data.clubId) || isSiteAdmin();
        // Only Admins of the club can write to series.
        allow write: if isClubAdmin(resource.data.clubId) || isSiteAdmin();
    }
    
    // Rules for the 'matches' collection
    match /matches/{matchId} {
      // Anyone in a club can read the match list.
      allow read: if isClubMember(resource.data.clubId) || isSiteAdmin();

      // Only Club Admins or Site Admins can create/update/delete matches.
      // We also allow authenticated users to update if they are only changing the 'registeredAnglers' array.
      allow create, delete: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin();
      allow update: if (isClubAdmin(resource.data.clubId) || isSiteAdmin()) ||
                     (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']));
    }
    
    // Rules for the 'results' collection
    match /results/{resultId} {
        // Members of the club can read results.
        allow read: if isClubMember(resource.data.clubId) || isSiteAdmin();
        // Only Admins or Marshals can write results.
        allow write: if isClubAdmin(request.resource.data.clubId) || isSiteAdmin() || request.auth.token.role == 'Marshal';
    }
    
    // Rules for the 'memberships' collection
    match /memberships/{membershipId} {
      // A user can create their own membership request.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // Admins of the target club can read/update requests. The user can read their own.
      allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) ||
                   isClubAdmin(resource.data.clubId) || 
                   isSiteAdmin();
      allow update, delete: if isClubAdmin(resource.data.clubId) || isSiteAdmin();
    }
  }
}
