rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user roles
    function isSiteAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Site Admin';
    }

    function isClubAdmin(userId, clubId) {
        let userDoc = get(/databases/$(database)/documents/users/$(userId)).data;
        return userDoc.role == 'Club Admin' && userDoc.primaryClubId == clubId;
    }
    
    function isClubMember(userId, clubId) {
        let userDoc = get(/databases/$(database)/documents/users/$(userId)).data;
        return userDoc.memberStatus == 'Member' && userDoc.primaryClubId == clubId;
    }

    //
    // USER DATA
    // Users can read their own profile.
    // Users can update their own first name, last name, and primary club ID.
    // Club Admins can update any user in their club.
    // Site Admins can update any user.
    //
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isSiteAdmin(request.auth.uid);
      allow update: if request.auth.uid == userId && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['firstName', 'lastName', 'primaryClubId', 'memberStatus', 'role']) ||
                       isClubAdmin(request.auth.uid, resource.data.primaryClubId) ||
                       isSiteAdmin(request.auth.uid);
      allow create, delete: if isSiteAdmin(request.auth.uid);
    }
    
    //
    // CLUBS
    // Any authenticated user can read the list of clubs.
    // Only Site Admins can create, update, or delete clubs.
    //
    match /clubs/{clubId} {
      allow read: if request.auth.uid != null;
      allow write: if isSiteAdmin(request.auth.uid);
    }

    //
    // SERIES
    // Authenticated users can read series for their club.
    // Admins can write series for their club.
    //
    match /series/{seriesId} {
      allow read: if request.auth.uid != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId ||
                      isSiteAdmin(request.auth.uid);
      allow create: if isClubAdmin(request.auth.uid, request.resource.data.clubId) || isSiteAdmin(request.auth.uid);
      allow update: if isClubAdmin(request.auth.uid, resource.data.clubId) || isSiteAdmin(request.auth.uid);
      allow delete: if isClubAdmin(request.auth.uid, resource.data.clubId) || isSiteAdmin(request.auth.uid);
    }

    //
    // MATCHES
    //
    match /matches/{matchId} {
        allow read: if request.auth.uid != null;
        allow create: if isClubAdmin(request.auth.uid, request.resource.data.clubId) || isSiteAdmin(request.auth.uid);
        allow update: if isClubAdmin(request.auth.uid, resource.data.clubId) || isSiteAdmin(request.auth.uid);
        allow delete: if isClubAdmin(request.auth.uid, resource.data.clubId) || isSiteAdmin(request.auth.uid);
    }

    //
    // RESULTS
    //
     match /results/{resultId} {
      allow read: if request.auth.uid != null;
      allow write: if isClubAdmin(request.auth.uid, get(/databases/$(database)/documents/matches/$(request.resource.data.matchId)).data.clubId) || isSiteAdmin(request.auth.uid);
    }

    //
    // STANDARD TEXTS
    //
    match /Standard_Texts/{textId} {
        allow read, write: if isSiteAdmin(request.auth.uid) ||
                           isClubAdmin(request.auth.uid, resource.data.clubId) ||
                           isClubAdmin(request.auth.uid, request.resource.data.clubId);
    }

    //
    // NOTIFICATIONS
    //
    match /notifications/{notificationId} {
        allow read: if request.auth.uid == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id;
        allow write: if isClubAdmin(request.auth.uid, request.resource.data.clubId) || isSiteAdmin(request.auth.uid);
    }
    
    //
    // HELP DOCUMENTS
    //
    match /helpDocuments/{docId} {
        allow read: if request.auth.uid != null;
        allow write: if isSiteAdmin(request.auth.uid);
    }

    //
    // PUBLIC UPCOMING MATCHES
    //
    match /publicUpcomingMatches/{matchId} {
        allow read: if true; // Publicly readable
        allow write: if isClubAdmin(request.auth.uid, request.resource.data.clubId) || isSiteAdmin(request.auth.uid);
    }

    //
    // PUBLIC MATCHES (COMPLETED)
    //
    match /publicMatches/{matchId} {
      allow read: if true; // Publicly readable
      allow write: if isClubAdmin(request.auth.uid, request.resource.data.clubId) || isSiteAdmin(request.auth.uid);
    }
    
    //
    // BLOGS & COMMENTS
    //
    match /blogs/{postId} {
      allow read: if request.auth.uid != null;
      allow write: if isClubAdmin(request.auth.uid, request.resource.data.clubId) || isSiteAdmin(request.auth.uid);
      
      match /comments/{commentId} {
          allow read: if request.auth.uid != null;
          allow create: if request.resource.data.authorId == request.auth.uid;
          allow write: if isClubAdmin(request.auth.uid, get(/databases/$(database)/documents/blogs/$(postId)).data.clubId) || isSiteAdmin(request.auth.uid);
      }
    }
    
    //
    // PUBLIC BLOG POSTS
    //
    match /publicBlogPosts/{postId} {
        allow read: if true;
        allow write: if isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, get(/databases/$(database)/documents/blogs/$(postId)).data.clubId);
    }
    
    //
    // TAGS
    //
    match /tags/{tagId} {
      allow read: if request.auth.uid != null;
      allow write: if isClubAdmin(request.auth.uid, request.resource.data.clubId) || isSiteAdmin(request.auth.uid);
    }
  }
}