rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    // =================================
    
    function isSiteAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      let userPrimaryClubId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;
      return (userRole == 'Club Admin' && userPrimaryClubId == clubId) || isSiteAdmin();
    }
    
    // User Rules
    // =================================

    // This rule allows a user to read/write their own document.
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId || isSiteAdmin();
      allow create: if request.auth != null;
    }
    
    // *** THIS IS THE CRITICAL NEW RULE ***
    // This allows admins to perform queries across the 'users' collection,
    // for example, to get all members of a club.
    match /{path=**}/users/{userId} {
      allow read: if isClubAdmin(resource.data.primaryClubId) || isSiteAdmin();
    }

    // Club Rules
    // =================================

    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if isSiteAdmin();
    }

    // Series Rules
    // =================================
    
    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow create, update: if isClubAdmin(request.resource.data.clubId);
      allow delete: if isSiteAdmin();
    }

    // Match Rules
    // =================================

    match /matches/{matchId} {
      allow read: if request.auth != null;
      allow create, update: if isClubAdmin(request.resource.data.clubId);
      
      // Allow any authenticated user to register (update registeredAnglers array)
      allow update: if request.auth != null
                    && 'registeredAnglers' in request.resource.data
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']);

      allow delete: if isSiteAdmin();
    }
    
    // Results Rules
    // =================================

    match /results/{resultId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isClubAdmin(request.resource.data.clubId);
    }
  }
}
