
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user document being accessed belongs to the signed-in user.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if a user has an admin role ('Club Admin' or 'Site Admin').
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Club Admin', 'Site Admin'];
    }

    // Helper function to check if a user is the Site Admin.
    function isSiteAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    // =====================================================================
    // Collection Rules
    // =====================================================================

    // CLUBS: Public can list, anyone signed in can view a single one.
    // Only Site Admins can create, update, or delete clubs.
    match /clubs/{clubId} {
      allow list: if true;
      allow get: if isSignedIn();
      allow write: if isSiteAdmin();
    }

    // USERS: Users can create their own profile. They can only read and update their own document.
    // Admins can read any user profile within their club scope or update specific fields.
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read, update: if isOwner(userId);
      allow list: if isAdmin(); // Admins can list users.
      // Allow admins to change role/status
      allow update: if isAdmin() && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'memberStatus', 'firstName', 'lastName']));
    }

    // SERIES: Any signed-in user can read the list of series.
    // Only admins of the corresponding club can create, update, or delete a series.
    match /series/{seriesId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId && isAdmin();
    }

    // MATCHES: Users can read matches for their club. Admins can write.
    match /matches/{matchId} {
      // Allow reading a single match document if the user belongs to that club.
      allow get: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId;

      // Allow listing matches if the query is filtered by the user's primary club.
      allow list: if isSignedIn() && request.query.clubId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;

      // Allow creating, updating, deleting if the user is an admin for that club.
      allow write: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId && isAdmin();

       // Allow any authenticated user to register (update the registeredAnglers array)
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']);
    }

    // RESULTS: Users can read results for their club. Admins can write.
    match /results/{resultId} {
       // Allow reading results if the user belongs to that club.
      allow get: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId;

      // Allow listing results if the query is filtered by the user's club.
      allow list: if isSignedIn() && request.query.clubId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;
      
      // Allow writing results if user is an admin of that club
      allow write: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.clubId && isAdmin();
    }
    
    // PUBLIC COLLECTIONS: Read-only for everyone
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Should only be written to by backend/trusted process
    }
    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Should only be written to by backend/trusted process
    }
  }
}
