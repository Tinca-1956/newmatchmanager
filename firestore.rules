rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    match /users/{userId} {
      // A user can read or write their own profile
      allow get, update: if request.auth.uid == userId;

      // Allow creating a user document if one doesn't exist for the UID
      allow create: if request.auth.uid == userId && !exists(/databases/$(database)/documents/users/$(userId));
    }

    // This rule allows the query on the /members page to work.
    // It lets an authenticated user run a query on the 'users' collection
    // ONLY IF the query includes a `where('primaryClubId', '==', user's own clubId)`.
    match /users/{userId} {
       allow list: if request.auth != null
                    && request.query.resource.data.primaryClubId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId;
    }

    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin'];
    }

    match /matches/{matchId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin'];
    }

    match /results/{resultId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin', 'Marshal'];
    }
  }
}
