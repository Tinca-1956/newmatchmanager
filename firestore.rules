
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the requesting user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Site Admin', 'Club Admin'];
    }

    // Function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user profile. Users can read their own profile.
      allow read: if request.auth != null && (isAdmin() || isOwner(userId));
      
      // Admins can write to any user profile. Users can write to their own.
      allow write: if request.auth != null && (isAdmin() || isOwner(userId));

      // Admins can list users.
      allow list: if request.auth != null && isAdmin();
    }

    // Rules for 'clubs' collection
    match /clubs/{clubId} {
        // Any authenticated user can read club details.
        allow read: if request.auth != null;
        // Only admins can create, update, or delete clubs.
        allow write: if request.auth != null && isAdmin();
    }

    // Rules for 'series' collection
    match /series/{seriesId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && isAdmin();
    }

    // Rules for 'matches' collection
    match /matches/{matchId} {
        allow read: if request.auth != null;
        // Allow write if user is an admin or if they are registering/unregistering themselves
        // (This is a simplified rule; in production, you might want more granular control)
        allow write: if request.auth != null && isAdmin();
    }
    
    // Rules for 'results' collection
    match /results/{resultId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
  }
}
