rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isClubMember(clubId) {
      return isSignedIn() && getUserData().primaryClubId == clubId;
    }

    function isSiteAdmin() {
      return isSignedIn() && getUserData().role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      return isSignedIn() && isClubMember(clubId) && getUserData().role == 'Club Admin';
    }
    
    // Rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isUser(userId) || isSiteAdmin();
    }
    
    match /clubs/{clubId} {
      allow read: if isSignedIn();
      allow write: if isSiteAdmin() || isClubAdmin(clubId);
    }
    
    match /series/{seriesId} {
      allow read: if isSignedIn();
      allow write: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }

    match /matches/{matchId} {
      allow read: if isSignedIn();
      
      // Allow creation if user is a club admin or site admin.
      allow create: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
      
      // Allow update for two specific cases:
      // 1. Admins can update any field.
      // 2. Any authenticated user can update ONLY to register/unregister themselves.
      allow update: if (isSiteAdmin() || isClubAdmin(resource.data.clubId)) 
                    || 
                    (
                      isSignedIn() &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']) &&
                      (
                        // Check for adding self to list
                        request.resource.data.registeredAnglers == resource.data.registeredAnglers.concat([request.auth.uid]) ||
                        // Check for removing self from list
                        resource.data.registeredAnglers == request.resource.data.registeredAnglers.concat([request.auth.uid])
                      )
                    );
      
      // Allow deletion if user is a club admin or site admin.
      allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    match /results/{resultId} {
      allow read: if isSignedIn();
      allow write: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
    }
    
    match /Standard_Texts/{textId} {
      allow read: if isSignedIn();
      allow write: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }
    
    match /tags/{tagId} {
      allow read: if isSignedIn();
      allow write: if isSiteAdmin() || isClubAdmin(resource.data.clubId);
    }

    match /blogs/{blogId} {
        allow read: if isSignedIn();
        allow create, update: if isSiteAdmin() || isClubAdmin(request.resource.data.clubId);
        allow delete: if isSiteAdmin() || isClubAdmin(resource.data.clubId);

        match /comments/{commentId} {
            allow read: if isSignedIn();
            allow create: if isSignedIn() && isClubMember(get(/databases/$(database)/documents/blogs/$(blogId)).data.clubId);
        }
    }
    
     match /notifications/{notificationId} {
      allow read, update: if isUser(resource.data.userId);
      allow create: if isSignedIn();
    }
    
    // PUBLIC COLLECTIONS
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Only backend can write
    }
    
    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Only backend can write
    }
    
    match /publicBlogPosts/{postId} {
      allow read: if true;
      allow write: if false; // Only backend can write
    }
  }
}
