rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSiteAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Site Admin';
    }

    function isClubAdmin(clubId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.role == 'Club Admin' && user.primaryClubId == clubId;
    }
    
    function isClubAdminForRequest(resource) {
       let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
       return user.role == 'Club Admin' && user.primaryClubId == resource.data.clubId;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isNewUserCreation() {
        return !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Rules for collections
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId) 
                    && request.resource.data.firstName is string
                    && request.resource.data.lastName is string
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.primaryClubId is string
                    && request.resource.data.role in ['Angler', 'Site Admin']
                    && request.resource.data.memberStatus in ['Pending', 'Member'];
      allow update: if isOwner(userId) || isSiteAdmin();
      allow delete: if isSiteAdmin();
    }
    
    match /clubs/{clubId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if isSiteAdmin();
    }
    
    match /series/{seriesId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isSiteAdmin() || isClubAdminForRequest(resource);
    }
    
    match /matches/{matchId} {
        allow read: if request.auth != null;
        allow create, update: if isSiteAdmin() || isClubAdminForRequest(resource);
        allow delete: if isSiteAdmin() || isClubAdminForRequest(resource);
    }

    match /results/{resultId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null && (isSiteAdmin() || isClubAdmin(request.query.get("clubId")));
      allow create, update, delete: if isSiteAdmin() || isClubAdminForRequest(resource);
    }

    match /helpDocuments/{docId} {
        allow read: if true;
        allow create, delete: if isSiteAdmin();
    }

    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if isSiteAdmin();
    }

    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if isSiteAdmin();
    }

  }
}
