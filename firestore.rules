
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles and permissions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isSiteAdmin(userId) {
      return isSignedIn() && getUserData(userId).role == 'Site Admin';
    }

    function isClubAdmin(userId) {
      return isSignedIn() && getUserData(userId).role == 'Club Admin';
    }

    function isClubOrSiteAdmin(userId) {
      let userRole = getUserData(userId).role;
      return isSignedIn() && (userRole == 'Site Admin' || userRole == 'Club Admin');
    }

    function isMemberOfClub(userId, clubId) {
      let userData = getUserData(userId);
      return isSignedIn() && userData.primaryClubId == clubId && userData.memberStatus == 'Member';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user document.
      // Users can read/update their own data.
      // Site/Club admins can manage users in their club.
      allow read, update: if isSignedIn() && (request.auth.uid == userId || isClubOrSiteAdmin(request.auth.uid));
      allow create: if isSignedIn();
      // Deletion should be handled logically (e.g., setting a 'deleted' flag)
      allow delete: if isSiteAdmin(request.auth.uid);
    }

    // Rules for the 'clubs' collection
    match /clubs/{clubId} {
      // Anyone can read club info.
      allow read: if true;
      // Only Site Admins can create/delete clubs.
      allow create, delete: if isSiteAdmin(request.auth.uid);
      // Site Admins or Club Admins of that specific club can update it.
      allow update: if isSiteAdmin(request.auth.uid) || (isClubAdmin(request.auth.uid) && getUserData(request.auth.uid).primaryClubId == clubId);
    }

    // Rules for 'series' collection
    match /series/{seriesId} {
      // Allow read if the user is a member of the club the series belongs to.
      allow read: if isSignedIn();
      // Allow write (create, update, delete) only for admins of that club.
      allow write: if isClubOrSiteAdmin(request.auth.uid) && getUserData(request.auth.uid).primaryClubId == request.resource.data.clubId;
    }

    // Rules for 'matches' collection
    match /matches/{matchId} {
      // Allow read for members of the club.
      allow read: if isSignedIn();
      // Allow writes only for admins of that club.
      allow write: if isClubOrSiteAdmin(request.auth.uid) && getUserData(request.auth.uid).primaryClubId == request.resource.data.clubId;
    }
    
    // Rules for 'results' collection (sub-collection of matches)
    match /results/{resultId} {
      allow read: if isSignedIn();
      allow write: if isClubOrSiteAdmin(request.auth.uid) && getUserData(request.auth.uid).primaryClubId == request.resource.data.clubId;
    }

    // Rules for 'blogs' and their 'comments' subcollection
    match /blogs/{blogId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isClubOrSiteAdmin(request.auth.uid) && getUserData(request.auth.uid).primaryClubId == request.resource.data.clubId;

      match /comments/{commentId} {
        allow read: if isSignedIn();
        // Any member of the club can create a comment.
        allow create: if isMemberOfClub(request.auth.uid, get(/databases/$(database)/documents/blogs/$(blogId)).data.clubId);
        // Only the author or an admin can delete a comment.
        allow delete: if isSignedIn() && (request.auth.uid == resource.data.authorId || isClubOrSiteAdmin(request.auth.uid));
      }
    }
    
    // Rules for match reviews and their comments
    match /matchReviews/{matchId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isClubOrSiteAdmin(request.auth.uid);

      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && getUserData(request.auth.uid).memberStatus == 'Member';
        allow delete: if isSignedIn() && (request.auth.uid == resource.data.authorId || isClubOrSiteAdmin(request.auth.uid));
      }
    }

    // Rules for Standard Texts
    match /Standard_Texts/{textId} {
        allow read: if isSignedIn();
        allow write: if isClubOrSiteAdmin(request.auth.uid);
    }
    
    // Rules for Notifications
    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow create, delete: if isClubOrSiteAdmin(request.auth.uid);
    }

    // Rules for public collections
    match /publicBlogPosts/{postId} {
      allow read: if true;
      allow write: if isClubOrSiteAdmin(request.auth.uid);
    }

    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if isClubOrSiteAdmin(request.auth.uid);
    }
    
    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if isClubOrSiteAdmin(request.auth.uid);
    }
    
     match /helpDocuments/{docId} {
      allow read: if true;
      allow write: if isSiteAdmin(request.auth.uid);
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
