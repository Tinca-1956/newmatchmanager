rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Function to check if the requesting user has a specific role in their user profile
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Site Admins can do anything
    match /{document=**} {
      allow read, write: if hasRole('Site Admin');
    }

    match /users/{userId} {
      // Users can read and update their own profile
      allow read, update: if request.auth.uid == userId;

      // Club Admins can read and update users in their own club.
      // This rule allows the "members-club-admin" page to function correctly.
      allow read, update: if hasRole('Club Admin') 
                        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.primaryClubId;
    }
    
    match /clubs/{clubId} {
      // Any authenticated user can read club details (for selection lists)
      allow read: if request.auth != null;
    }

    match /series/{seriesId} {
      // Let authenticated users read series info.
      allow read: if request.auth != null;
    }

    match /matches/{matchId} {
        // Any authenticated user can read match details
        allow read: if request.auth != null;

        // Allow authenticated users to register/unregister by updating the registeredAnglers array
        allow update: if request.auth != null;
    }
    
     match /results/{resultId} {
      // Any authenticated user can read results
      allow read: if request.auth != null;
    }
    
    match /publicUpcomingMatches/{matchId} {
      // Allow anyone to read public match data, even unauthenticated users
      allow get, list: if true;
    }

    match /publicMatches/{matchId} {
        // Allow anyone to read public results data, even unauthenticated users
        allow get, list: if true;
    }
  }
}
