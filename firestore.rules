
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user has a specific role
    function hasRole(userId, role) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == role;
    }
    
    // Helper function to check if a user is a Club Admin of a specific club
    function isClubAdmin(userId, clubId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'Club Admin' && user.primaryClubId == clubId;
    }
    
    // Helper function to check if a user is a Site Admin
    function isSiteAdmin(userId) {
      return hasRole(userId, 'Site Admin');
    }

    // Helper function to check if a user is a Marshal for a specific club
    function isMarshal(userId, clubId) {
       let user = get(/databases/$(database)/documents/users/$(userId)).data;
       return (user.role == 'Marshal' || isClubAdmin(userId, clubId) || isSiteAdmin(userId)) && user.primaryClubId == clubId;
    }

    match /users/{userId} {
      // Allow user to create their own document
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow user to read their own data, or Site/Club admin to read any user in their club
      allow get: if request.auth != null;
      
      // Allow users to update their own non-critical data.
      // Admins can update more fields.
      allow update: if request.auth != null && (
        (request.auth.uid == userId && !("role" in request.resource.data)) ||
        isSiteAdmin(request.auth.uid) ||
        isClubAdmin(request.auth.uid, resource.data.primaryClubId)
      );
      
      // Allow read for all authenticated users for lists etc.
      allow list: if request.auth != null;
    }

    match /clubs/{clubId} {
      // Anyone can see the list of clubs (for selection)
      allow read: if request.auth != null;
      
      // Only site admins can create/update/delete clubs
      allow write: if request.auth != null && isSiteAdmin(request.auth.uid);
    }
    
    match /series/{seriesId} {
      allow read: if request.auth != null;
      
      // Only Site Admins or Club Admins of that club can write
      allow write: if request.auth != null && (
        isSiteAdmin(request.auth.uid) || 
        isClubAdmin(request.auth.uid, get(/databases/$(database)/documents/series/$(seriesId)).data.clubId)
      );
    }

    match /matches/{matchId} {
      allow read: if request.auth != null;

      // Allow registration (update) by any authenticated user for upcoming matches
      allow update: if request.auth != null && (
         isSiteAdmin(request.auth.uid) ||
         isClubAdmin(request.auth.uid, resource.data.clubId) ||
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registeredAnglers', 'registeredCount']))
      );

      // Only Site Admins or Club Admins of that club can create/delete
      allow create, delete: if request.auth != null && (
        isSiteAdmin(request.auth.uid) ||
        isClubAdmin(request.auth.uid, request.resource.data.clubId)
      );
    }
    
    match /results/{resultId} {
      allow read: if request.auth != null;
      
      // Only Marshals, Club Admins, or Site Admins for the relevant club can write results
      allow write: if request.auth != null && (
        isMarshal(request.auth.uid, request.resource.data.clubId)
      );
    }
  }
}
