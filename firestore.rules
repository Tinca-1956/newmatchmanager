
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // UTILITY: Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // UTILITY: Helper function to check if a user has a specific role in a specific club
    function isClubRole(clubId, role) {
        let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userProfile.primaryClubId == clubId && userProfile.role == role;
    }

    // UTILITY: Helper function to check if a user is a member of a specific club
     function isClubMember(clubId) {
        let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userProfile.primaryClubId == clubId && userProfile.memberStatus == 'Member';
    }

    // == PUBLIC COLLECTIONS ==
    // These collections are readable by anyone, even unauthenticated users.
    // Write access should be highly restricted (e.g., only by backend functions or site admins).
    match /clubs/{clubId} {
      allow read;
      allow write: if isRole('Site Admin');
    }
    
    match /publicMatches/{matchId} {
        allow read;
        allow write: if isRole('Site Admin'); // Should only be written by trusted server process
    }
    
    match /publicUpcomingMatches/{matchId} {
        allow read;
        // Writable by Site/Club Admins to allow match creation/updates to sync
        allow write: if isRole('Site Admin') || isClubRole(request.resource.data.clubId, 'Club Admin');
        allow delete: if isRole('Site Admin') || isClubRole(resource.data.clubId, 'Club Admin');
    }

    // == SECURE COLLECTIONS ==
    // These require authentication for most actions.
    match /users/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read any other user's profile
      allow create: if request.auth.uid == userId; // Users can create their own profile
      allow update: if request.auth.uid == userId // Users can update their own profile
                    || isRole('Site Admin') // Site admins can update any profile
                    || isClubRole(resource.data.primaryClubId, 'Club Admin'); // Club admins can update users in their club
      allow delete: if isRole('Site Admin'); // Only Site Admins can delete users
    }
    
    match /series/{seriesId} {
        allow read: if request.auth != null; // Any authenticated user can read series info
        // Write/delete is limited to admins of the specific club
        allow create, update, delete: if isRole('Site Admin') || isClubRole(request.resource.data.clubId, 'Club Admin');
    }

    match /matches/{matchId} {
      allow read: if request.auth != null; // Any authenticated user can read match details
      // Create/update is limited to admins of the specific club
      allow create, update: if isRole('Site Admin') || isClubRole(request.resource.data.clubId, 'Club Admin');
      allow delete: if isRole('Site Admin'); // Only site admins can delete matches
    }

    match /results/{resultId} {
      allow read: if request.auth != null; // Any authenticated user can read results
      // Create/update is limited to admins of the specific club
      allow create, update, delete: if isRole('Site Admin') || isClubRole(request.resource.data.clubId, 'Club Admin');
    }
  }
}
