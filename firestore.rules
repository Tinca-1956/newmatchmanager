rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isSiteAdmin() {
      return isSignedIn() && getUserData().role == 'Site Admin';
    }

    function isClubAdmin() {
        return isSignedIn() && getUserData().role == 'Club Admin';
    }

    // Check if the user is an admin of the specified club
    function isUpdatingClubMember(clubId) {
        return isClubAdmin() && getUserData().primaryClubId == clubId;
    }
    
    // Check if a user is only updating their own name or primary club
    function isUpdatingOwnProfile() {
      return request.resource.data.keys().hasAll(['firstName', 'lastName', 'primaryClubId']) && request.resource.data.size() == 3;
    }
    
    function isRegistering(match) {
      return request.auth.uid in match.registeredAnglers;
    }

    function isUnregistering(match) {
      return request.auth.uid in resource.data.registeredAnglers;
    }

    // Collections
    match /users/{userId} {
      allow get, list: if isSignedIn();

      // User can create their own doc. Admins can create users in their own club.
      allow create: if isOwner(userId)
                    || isSiteAdmin()
                    || (isClubAdmin() && isUpdatingClubMember(request.resource.data.primaryClubId));

      // User can update their own profile. Admins can update users in their club.
      allow update: if isOwner(userId) && isUpdatingOwnProfile()
                    || isSiteAdmin()
                    || (isClubAdmin() && isUpdatingClubMember(resource.data.primaryClubId));
                    
      allow delete: if isSiteAdmin();
    }
    
    match /clubs/{clubId} {
      allow read: if true;
      allow create, update, delete: if isSiteAdmin();
    }

    match /series/{seriesId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSiteAdmin() || isClubAdmin();
    }

    match /matches/{matchId} {
      allow read: if isSignedIn();
      allow create, delete: if isSiteAdmin() || isClubAdmin();
      
      // Complex update logic for matches
      allow update: if isSiteAdmin() || isClubAdmin()
                    || (
                      // This block allows an angler to register or unregister
                      isSignedIn() &&
                      // The fields being updated must be exactly these two
                      request.resource.data.keys().hasAll(['registeredAnglers', 'registeredCount']) &&
                      // Check for registration: user is being added
                      (isRegistering(request.resource.data) && request.resource.data.registeredCount == resource.data.registeredCount + 1) ||
                      // Check for un-registration: user is being removed
                      (isUnregistering(resource.data) && request.resource.data.registeredCount == resource.data.registeredCount - 1)
                    );
    }
    
    match /results/{resultId} {
      // Allow any signed-in user to read results.
      allow read: if true;
      // Allow only admins to write results.
      allow write: if isSiteAdmin() || isClubAdmin();
    }
    
    match /publicMatches/{matchId} {
        allow read: if true; // Publicly readable
        allow write: if isSiteAdmin() || isClubAdmin(); // Only admins can publish
    }
    
    match /publicUpcomingMatches/{matchId} {
        allow read: if true;
        allow write: if isSiteAdmin() || isClubAdmin();
    }
    
    match /Standard_Texts/{textId} {
        allow read, write: if isSiteAdmin() || isClubAdmin();
    }
    
    match /helpDocuments/{docId} {
        allow read: if isSignedIn();
        allow write, delete: if isSiteAdmin();
    }
  }
}
