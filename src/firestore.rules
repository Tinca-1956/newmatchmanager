
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is a Site Admin
    function isSiteAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Site Admin';
    }

    // Helper function to check if a user is a Club Admin for a specific club
    function isClubAdmin(userId, clubId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'Club Admin' && user.primaryClubId == clubId;
    }

    match /users/{userId} {
      // 1. A user can read their own profile.
      // 2. A user can read another user's profile if they are in the same club.
      // 3. A site admin can read any user profile.
      allow read: if request.auth.uid == userId ||
                   (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryClubId == resource.data.primaryClubId) ||
                   isSiteAdmin(request.auth.uid);

      // A user can update their own profile, or an admin can update a user's profile in the same club.
      allow update: if request.auth.uid == userId ||
                     isSiteAdmin(request.auth.uid) || 
                     (isClubAdmin(request.auth.uid, resource.data.primaryClubId));
                     
      // Only site admins can create/delete users through the app for now
      allow create, delete: if isSiteAdmin(request.auth.uid);
    }
    
    match /clubs/{clubId} {
      // Any authenticated user can read club details.
      allow read: if request.auth != null;
      // Only site admins or club admins of that specific club can update it.
      allow write: if request.auth != null && (isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, clubId));
    }

    match /series/{seriesId} {
       // Allow read if user is authenticated.
      allow read: if request.auth != null;
      // Allow write if user is a site admin or a club admin for the series' club.
      allow write: if request.auth != null && 
                    (isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, request.resource.data.clubId));
    }

    match /matches/{matchId} {
      // Allow read if user is authenticated.
      allow read: if request.auth != null;
      // Allow write if user is a site admin or a club admin for the match's club.
      allow write: if request.auth != null && 
                    (isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, request.resource.data.clubId));
    }
    
    match /results/{resultId} {
       // Allow read if user is authenticated.
      allow read: if request.auth != null;
      // Allow write if user is a site admin or a club admin for the result's club.
      allow write: if request.auth != null && 
                    (isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, request.resource.data.clubId));
    }
    
    // Public collections are readable by anyone, but writable only by admins
    match /publicUpcomingMatches/{matchId} {
        allow get, list;
        allow write: if request.auth != null && 
                        (isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, request.resource.data.clubId));
    }
    
    match /publicMatches/{matchId} {
        allow get, list;
        allow write: if request.auth != null &&
                        (isSiteAdmin(request.auth.uid) || isClubAdmin(request.auth.uid, request.resource.data.clubId));
    }
    
  }
}
