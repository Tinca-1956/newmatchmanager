rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSiteAdmin(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role == 'Site Admin';
    }

    function isClubAdmin(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role == 'Club Admin';
    }
    
    function isMemberOfClub(uid, clubId) {
      return get(/databases/$(database)/documents/users/$(uid)).data.primaryClubId == clubId;
    }
    
    function isOwnRecord(uid) {
      return request.auth.uid == uid;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // User creation is open, profile details are set after.
      // Allow user to update their own record, or a Site Admin to update any record.
      allow update: if isOwnRecord(userId) || isSiteAdmin(request.auth.uid); 
      allow delete: if isSiteAdmin(request.auth.uid);
    }

    match /clubs/{clubId} {
      allow read: if true; // All users can read club info.
      // Allow Site Admin or a Club Admin of that specific club to update.
      allow update: if isSiteAdmin(request.auth.uid) || (isClubAdmin(request.auth.uid) && isMemberOfClub(request.auth.uid, clubId));
      allow create, delete: if isSiteAdmin(request.auth.uid);
    }

    match /series/{seriesId} {
      allow read: if isSignedIn();
      // Allow Site Admin or a Club Admin of the series' club to manage.
      allow create, update, delete: if isSiteAdmin(request.auth.uid) || 
                                     (isClubAdmin(request.auth.uid) && isMemberOfClub(request.auth.uid, resource.data.clubId));
    }

    match /matches/{matchId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSiteAdmin(request.auth.uid) || 
                                      (isClubAdmin(request.auth.uid) && isMemberOfClub(request.auth.uid, resource.data.clubId));
    }
    
     match /results/{resultId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isSiteAdmin(request.auth.uid) || 
                                         (isClubAdmin(request.auth.uid) && isMemberOfClub(request.auth.uid, resource.data.clubId));
    }

    match /Standard_Texts/{textId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSiteAdmin(request.auth.uid) || 
                                      (isClubAdmin(request.auth.uid) && isMemberOfClub(request.auth.uid, resource.data.clubId));
    }
    
    match /helpDocuments/{docId} {
        allow read: if isSignedIn();
        // Only Site Admins can manage help documents
        allow create, update, delete: if isSiteAdmin(request.auth.uid);
    }
    
    // Public collections are read-only for everyone
    match /publicMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Nobody should write directly to this collection
    }

    match /publicUpcomingMatches/{matchId} {
      allow read: if true;
      allow write: if false; // Nobody should write directly to this collection
    }
  }
}
